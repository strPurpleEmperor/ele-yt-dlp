import { app, BrowserWindow, shell, ipcMain, session } from 'electron'
import { fileURLToPath } from 'node:url'
import {ChildProcessWithoutNullStreams, spawn} from 'child_process'
import path from 'node:path'
import os from 'node:os'
import { update } from './update'
import fs from "fs";
const __dirname = path.dirname(fileURLToPath(import.meta.url))

process.env.APP_ROOT = path.join(__dirname, '../..')
let ext:string = ''
if (process.platform === 'win32') {
  ext += '.exe';  // 为 Windows 添加 .exe 后缀
}
// 获取下载工具的路径（假设它们位于 resources/darwin 文件夹中）
const ytDlpPath = path.join(app.getAppPath(), 'resources', process.platform, 'yt-dlp'+ext);
const ffmpegPath = path.join(app.getAppPath(), 'resources', process.platform, 'ffmpeg'+ext);
const ffprobePath = path.join(app.getAppPath(), 'resources', process.platform, 'ffprobe'+ext);
// 设置环境变量，使 yt-dlp 能自动找到 ffmpeg 和 ffprobe
const env = { ...process.env, PATH: `${ffmpegPath}:${ffprobePath}:${process.env.PATH}` };

export const MAIN_DIST = path.join(process.env.APP_ROOT, 'dist-electron')
export const RENDERER_DIST = path.join(process.env.APP_ROOT, 'dist')
export const VITE_DEV_SERVER_URL = process.env.VITE_DEV_SERVER_URL

process.env.VITE_PUBLIC = VITE_DEV_SERVER_URL
  ? path.join(process.env.APP_ROOT, 'public')
  : RENDERER_DIST

// Disable GPU Acceleration for Windows 7
if (os.release().startsWith('6.1')) app.disableHardwareAcceleration()

// Set application name for Windows 10+ notifications
if (process.platform === 'win32') app.setAppUserModelId(app.getName())

if (!app.requestSingleInstanceLock()) {
  app.quit()
  process.exit(0)
}

let win: BrowserWindow | null = null
const preload = path.join(__dirname, '../preload/index.mjs')
const indexHtml = path.join(RENDERER_DIST, 'index.html')

async function createWindow() {
  win = new BrowserWindow({
    title: 'Main window',
    icon: path.join(process.env.VITE_PUBLIC, 'favicon.ico'),
    webPreferences: {
      preload,
      webviewTag: true
      // Warning: Enable nodeIntegration and disable contextIsolation is not secure in production
      // nodeIntegration: true,

      // Consider using contextBridge.exposeInMainWorld
      // Read more on https://www.electronjs.org/docs/latest/tutorial/context-isolation
      // contextIsolation: false,
    },
  })

  if (VITE_DEV_SERVER_URL) { // #298
    win.loadURL(VITE_DEV_SERVER_URL)
    // Open devTool if the app is not packaged
    win.webContents.openDevTools()
  } else {
    win.loadFile(indexHtml)
  }

  // Test actively push message to the Electron-Renderer
  win.webContents.on('did-finish-load', () => {
    win?.webContents.send('main-process-message', new Date().toLocaleString())
  })

  // Make all links open with the browser, not with the application
  win.webContents.setWindowOpenHandler(({ url }) => {
    if (url.startsWith('https:')) shell.openExternal(url)
    return { action: 'deny' }
  })

  // Auto update
  update(win)
}

app.whenReady().then(async () => {
  await createWindow()
})

app.on('window-all-closed', () => {
  win = null
  if (process.platform !== 'darwin') app.quit()
})

app.on('second-instance', () => {
  if (win) {
    // Focus on the main window if the user tried to open another
    if (win.isMinimized()) win.restore()
    win.focus()
  }
})

app.on('activate', () => {
  const allWindows = BrowserWindow.getAllWindows()
  if (allWindows.length) {
    allWindows[0].focus()
  } else {
    createWindow()
  }
})

// New window example arg: new windows url
ipcMain.handle('open-win', (_, arg) => {
  const childWindow = new BrowserWindow({
    webPreferences: {
      preload,
      nodeIntegration: true,
      contextIsolation: false,
    },
  })

  if (VITE_DEV_SERVER_URL) {
    childWindow.loadURL(`${VITE_DEV_SERVER_URL}#${arg}`)
  } else {
    childWindow.loadFile(indexHtml, { hash: arg })
  }
})
// 监听从渲染进程发送的 "get-cookies" 消息，并获取 webview 的 Cookie
ipcMain.on('get-cookies', async (event) => {
  try {
    // 获取所有的 cookies
    const cookies = await session.defaultSession.cookies.get({});

    // 转换为 Netscape 格式
    const cookieLines = cookies.map((cookie: any) => {
      const domain = cookie.domain;
      const includeSubdomains = domain.startsWith('.') ? 'TRUE' : 'FALSE';
      const path = cookie.path || '/';
      const secure = cookie.secure ? 'TRUE' : 'FALSE';
      const expiration = cookie.expirationDate ? Math.floor(cookie.expirationDate) : 2147483647; // 默认 2038 年

      return `${domain}\t${includeSubdomains}\t${path}\t${secure}\t${expiration}\t${cookie.name}\t${cookie.value}`;
    });

    // 添加 Netscape 格式文件的头部
    const netscapeCookieFileContent = [
      '# Netscape HTTP Cookie File',
      '# This file was generated by Electron',
      ...cookieLines
    ].join('\n');

    // 定义保存的文件路径
    const filePath = path.join(__dirname, 'cookies.txt');

    // 使用 fs 模块将 Cookie 数据保存到文件
    fs.writeFile(filePath, netscapeCookieFileContent, 'utf-8',(err) => {
      if (err) {
        console.error('保存 Cookie 失败:', err);
        return;
      }
      console.log('Cookies 已保存到文件:', filePath);
    });
    event.reply('cookies-updated', cookies);
  } catch (error) {
    console.error('获取 Cookie 失败:', error);
  }
});
// 示例：使用 yt-dlp 下载视频
let ytDlpProcess:ChildProcessWithoutNullStreams; // 将 ytDlpProcess 赋值到外部变量，便于后续调用 kill()
ipcMain.on('download-video', async (event, url) => {
  return new Promise<any>((resolve, reject) => {
    // 使用视频的原始名称（title）和扩展名（ext）
    const outputPath = path.join(app.getPath('downloads'), '%(title)s.%(ext)s'); // 这里使用 %title 和 %ext
    const cookiesPath = path.join(__dirname, 'cookies.txt');
    // 执行 yt-dlp 命令，yt-dlp 将自动调用同目录的 ffmpeg 和 ffprobe
    ytDlpProcess = spawn(
      ytDlpPath,
      [
        url,
        '-o', outputPath,
        '-f', 'bestvideo+bestaudio/best',
        '--cookies', cookiesPath
      ],
      { env }
    );
    let outStr: string = ''
    ytDlpProcess.stdout.on('data', (data) => {
      outStr += data.toString(); // 将 buffer 转换为字符串
      console.log(`yt-dlp 输出: ${outStr}`);
      // 发送到前端
      event.reply('yt-dlp-updated', outStr);
    });

    ytDlpProcess.stderr.on('data', (data) => {
      event.reply('yt-dlp-error', data);
      console.log(`yt-dlp 错误: ${data}`);
    });

    ytDlpProcess.on('close', (code) => {
      if (code === 0) {
        resolve({ success: true, outputPath });
      } else {
        reject({ success: false, error: `yt-dlp 退出，错误代码: ${code}` });
      }
    });
  });
});
ipcMain.on('kill-yt-dlp', (event) => {
  if (ytDlpProcess) {
    ytDlpProcess.kill('SIGINT'); // 向进程发送中断信号
    event.reply('yt-dlp-updated', '下载进程已手动终止');
  } else {
    event.reply('yt-dlp-error', '没有正在运行的下载进程');
  }
})
ipcMain.on('open-new-win', (event, url) => {
  const newWindow = new BrowserWindow({
    width: 1300,
    height: 790,
    webPreferences: {
      nodeIntegration: false, // 禁用 Node 集成，提高安全性
      contextIsolation: true, // 隔离上下文
    },
    x: 0,
    y: 0
  });

  newWindow.loadURL(url);

  // 监听页面关闭事件
  newWindow.on('closed', () => {
    console.log('新窗口已关闭');
  });
})